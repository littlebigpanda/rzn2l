/*
 * bsp_led.h
 *
 *  Created on: Oct 25, 2023
 *      Author: xgj12
 */

#ifndef BSP_LED_H_
#define BSP_LED_H_

/* 操作LED显示数据更新模式，0-每个周期都发送配置，读取输入; 1-设定周期发送配置，设定周期读取输入 */
#define CFG_TCA6424A_REFRESH_MODE           1

#if(CFG_TCA6424A_REFRESH_MODE)
#define CFG_TCA6424A_CONFIG_INTERVAL        500 /* 传输配置信息的间隔周期 */
#define CFG_TCA6424A_READ_INPUT_INTERVAL    20  /* 读取按键输入信息的间隔周期 */
#endif

#define CFG_LED_IIC_USE_DMAC                1   /* 使能DMA传输 */

enum TCA6424A_CMD_t
{
    TCA6424A_CMD_IN0 = 0x00,
    TCA6424A_CMD_IN1 = 0x01,
    TCA6424A_CMD_IN2 = 0x02,
    TCA6424A_CMD_RSVD1 = 0x03,
    TCA6424A_CMD_OUT0 = 0x04,
    TCA6424A_CMD_OUT1 = 0x05,
    TCA6424A_CMD_OUT2 = 0x06,
    TCA6424A_CMD_RSVD2 = 0x07,
    TCA6424A_CMD_POL_INV0 = 0x08,
    TCA6424A_CMD_POL_INV1 = 0x09,
    TCA6424A_CMD_POL_INV2 = 0x0A,
    TCA6424A_CMD_RSVD3 = 0x0B,
    TCA6424A_CMD_CONF0 = 0x0C,
    TCA6424A_CMD_CONF1 = 0x0D,
    TCA6424A_CMD_CONF2 = 0x0E,
    TCA6424A_CMD_RSVD4 = 0x0F,
    TCA6424A_CMD_IN0_AI = 0x80,
    TCA6424A_CMD_IN1_AI = 0x81,
    TCA6424A_CMD_IN2_AI = 0x82,
    TCA6424A_CMD_RSVD1_AI = 0x83,
    TCA6424A_CMD_OUT0_AI = 0x84,
    TCA6424A_CMD_OUT1_AI = 0x85,
    TCA6424A_CMD_OUT2_AI = 0x86,
    TCA6424A_CMD_RSVD2_AI = 0x87,
    TCA6424A_CMD_POL_INV0_AI = 0x88,
    TCA6424A_CMD_POL_INV1_AI = 0x89,
    TCA6424A_CMD_POL_INV2_AI = 0x8A,
    TCA6424A_CMD_RSVD3_AI = 0x8B,
    TCA6424A_CMD_CONF0_AI = 0x8C,
    TCA6424A_CMD_CONF1_AI = 0x8D,
    TCA6424A_CMD_CONF2_AI = 0x8E,
    TCA6424A_CMD_RSVD4_AI = 0x8F,
    PCA9535_CMD_IN0 = 0x00,
    PCA9535_CMD_OUT0 = 0x02,
    PCA9535_CMD_POL0 = 0x04,
    PCA9535_CMD_CONF0 = 0x06
};
enum TCA6424A_STATE_t
{
    TCA6424A_STATE_SUCCESS,
    TCA6424A_STATE_TIMEOUT,
    TCA6424A_STATE_STP_NOT_READY,
    TCA6424A_STATE_NACK_ERR_1,
    TCA6424A_STATE_FLAG_ERR_1,
    TCA6424A_STATE_NACK_ERR_2,
    TCA6424A_STATE_FLAG_ERR_2,
    TCA6424A_STATE_NACK_ERR_3,
    TCA6424A_STATE_FLAG_ERR_3,
    TCA6424A_STATE_NACK_ERR_4,
    TCA6424A_STATE_FLAG_ERR_4,
    TCA6424A_STATE_NACK_ERR_5,
    TCA6424A_STATE_FLAG_ERR_5,
    TCA6424A_STATE_NACK_ERR_6,
    TCA6424A_STATE_FLAG_ERR_6,
    TCA6424A_STATE_NACK_ERR_7,
    TCA6424A_STATE_FLAG_ERR_7,
    TCA6424A_STATE_NACK_ERR_8,
    TCA6424A_STATE_FLAG_ERR_8,
    TCA6424A_STATE_NACK_ERR_9,
    TCA6424A_STATE_FLAG_ERR_9,
    TCA6424A_STATE_NACK_ERR_10,
    TCA6424A_STATE_FLAG_ERR_10,
    TCA6424A_STATE_NACK_ERR_11,
    TCA6424A_STATE_FLAG_ERR_11,
    TCA6424A_STATE_NACK_ERR_12,
    TCA6424A_STATE_FLAG_ERR_12,
    TCA6424A_STATE_BUS_ERR,
    TCA6424A_STATE_ADDR_ERR,
    TCA6424A_STATE_DATA_ERR,
    TCA6424A_STATE_STOP_ERR,
    TCA6424A_STATE_READ_ERR,
    TCA6424A_STATE_WRITE_ERR
};
enum TCA6424A_HANDLE_STATE_t
{
    TCA6424A_HANDLE_STATE_TEST_ADDR_INIT,
    TCA6424A_HANDLE_STATE_TEST_ADDR_START,
    TCA6424A_HANDLE_STATE_TEST_ADDR_END,
    TCA6424A_HANDLE_STATE_INIT,
    TCA6424A_HANDLE_STATE_CHECK_BUSY,
    TCA6424A_HANDLE_STATE_WRITE_INIT,
    TCA6424A_HANDLE_STATE_WRITE_START,
    TCA6424A_HANDLE_STATE_WRITE_RUNNING,
    TCA6424A_HANDLE_STATE_READ_INIT,
    TCA6424A_HANDLE_STATE_READ_START,
    TCA6424A_HANDLE_STATE_READ_RUINING,
    TCA6424A_HANDLE_STATE_READ_WAIT_FINISH,
    TCA6424A_HANDLE_STATE_FINISH_CHECK_EEPROM,
    TCA6424A_HANDLE_I2C_ERR,
    TCA6424A_HANDLE_I2C_ERR_START,
    TCA6424A_HANDLE_I2C_ERR_LOW,
    TCA6424A_HANDLE_I2C_ERR_HIGH
};
enum CHIP_TYPE_E
{
    CHIP_TYPE_TCA6424 = 0,
    CHIP_TYPE_PCA9535 = 1,
    CHIP_TYPE_NULL
};
struct TCA6424A_t
{
    enum CHIP_TYPE_E ChipType;
    enum TCA6424A_HANDLE_STATE_t HandleState;
    enum TCA6424A_HANDLE_STATE_t HandleStateNext;
    unsigned char EepromControlFlag;
    uint8_t Addr;
    uint16_t timeCnt;
    uint8_t BitSequenceCnt;
    uint8_t key_val;        /* 按键输入信号， bit0-bit3 */
    uint32_t readKeyValCnt;
    uint32_t sendCfgValCnt;
    uint8_t sendCfgFlag;    /* 0-写配置信息，1-跳过写配置信号/本周期不需要写配置信息 */
    uint8_t bGetLedType;    /* 0-未取得LED型号， 1-取得LED型号 */
};

extern struct TCA6424A_t TCA6424A[1];


/* 用户接口 */
extern unsigned char led_buffer[5]; /* 5位LED数码管的显示字符 */
void bsp_led_init(void);            /* 按键LED面板初始化 */
void bsp_led_handle(void);          /* 使用定时器，比如100us定时调用该函数，内部没有堵塞或者长延时操作 */




#endif /* BSP_LED_H_ */
